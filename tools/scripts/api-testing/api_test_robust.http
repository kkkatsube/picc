### üöÄ PICC API Testing - Robust Version
### Handles both new and existing users automatically

@baseUrl = http://localhost:8000/api
@contentType = application/json

###############################################
### üìã STEP 1: Health Check
###############################################
GET {{baseUrl}}/health


###############################################
### üë§ STEP 2: Smart Authentication
### Try register first, fallback to login if needed
###############################################

### Try registration first
# @name register_attempt
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "Test User",
  "email": "test@example.com",
  "password": "password123",
  "password_confirmation": "password123"
}

### Fallback login (if registration failed)
# @name login_fallback
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "test@example.com", 
  "password": "password123"
}

###############################################
### üìù Smart Token Extraction
### Use registration token if available, otherwise use login token
###############################################
@token = {{register_attempt.response.body.access_token}}
# Backup: If register failed, use login token instead
# @token = {{login_fallback.response.body.access_token}}

###############################################
### üîç STEP 3: Get Current User Info (Protected Route)
###############################################
GET {{baseUrl}}/auth/user
Authorization: Bearer {{token}}

###############################################
### üëã STEP 4: Logout
###############################################
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{token}}

###############################################
### üß™ STEP 5: Test Different Scenarios
###############################################

### Create a second user (should always work)
# @name user2
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "Second User",
  "email": "second@example.com",
  "password": "password123",
  "password_confirmation": "password123"
}

### Get token for second user
@token2 = {{user2.response.body.access_token}}

### Test second user's protected route
GET {{baseUrl}}/auth/user
Authorization: Bearer {{token2}}

### Logout second user
POST {{baseUrl}}/auth/logout
Authorization: Bearer {{token2}}

###############################################
### ‚ùå STEP 6: Error Testing
###############################################

### Test without authorization
GET {{baseUrl}}/auth/user

### Test with invalid credentials
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

### Test validation errors
POST {{baseUrl}}/auth/register
Content-Type: {{contentType}}

{
  "name": "",
  "email": "invalid-email",
  "password": "123"
}