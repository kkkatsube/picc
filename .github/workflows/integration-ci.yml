name: Integration CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  docker-integration:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create environment file
      run: |
        cd backend
        cp .env.example .env
        sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=pgsql/' .env
        sed -i 's/#DB_HOST=.*/DB_HOST=picc-database-1/' .env
        sed -i 's/#DB_PORT=.*/DB_PORT=5432/' .env  
        sed -i 's/#DB_DATABASE=.*/DB_DATABASE=picc/' .env
        sed -i 's/#DB_USERNAME=.*/DB_USERNAME=postgres/' .env
        sed -i 's/#DB_PASSWORD=.*/DB_PASSWORD=secret/' .env
        sed -i 's/REDIS_HOST=.*/REDIS_HOST=picc-redis-1/' .env
        echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env

    - name: Build and start services
      run: |
        docker-compose up -d --build
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for backend to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'
        
        echo "Waiting for frontend to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run backend integration tests
      run: |
        docker exec picc-backend-1 ./vendor/bin/pest tests/Feature/

    - name: Test API endpoints
      run: |
        # Test health endpoint
        response=$(curl -s http://localhost:8000/api/health)
        echo "Health endpoint response: $response"
        
        # Verify JSON response structure
        echo "$response" | jq '.status' | grep -E '"ok"|"error"'
        echo "$response" | jq '.checks.api.status' | grep '"ok"'

    - name: Test frontend build
      run: |
        docker exec picc-backend-1 php -v
        docker exec picc-frontend-1 node --version 2>/dev/null || echo "Frontend container not found"

    - name: Check service logs for errors
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker logs picc-backend-1 --tail=50
        echo "=== Database Logs ==="
        docker logs picc-database-1 --tail=20
        echo "=== Redis Logs ==="
        docker logs picc-redis-1 --tail=20

    - name: Clean up
      if: always()
      run: |
        docker-compose down -v

  api-contract-tests:
    name: API Contract Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install OpenAPI tools
      run: |
        npm init -y
        npm install --save-dev @apidevtools/swagger-parser

    - name: Validate OpenAPI specification
      run: |
        npx swagger-parser validate docs/api/openapi.yml

    - name: Check API specification consistency
      run: |
        echo "OpenAPI validation completed successfully"
        # Future: Add actual API response validation against spec