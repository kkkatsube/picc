openapi: 3.0.3
info:
  title: PICC API
  description: PICC Learning Project RESTful API
  version: 1.0.0
  contact:
    name: PICC Development Team
    email: dev@picc.local

servers:
  - url: http://localhost:8000/api
    description: Local Development Server
  - url: https://api.picc.dev/api
    description: Staging Server
  - url: https://api.picc.com/api
    description: Production Server

paths:
  /health:
    get:
      summary: API Health Check
      description: システムの稼働状態を確認するヘルスチェックエンドポイント
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /auth/register:
    post:
      summary: User Registration
      description: 新規ユーザー登録
      operationId: register
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/login:
    post:
      summary: User Login
      description: ユーザーログイン
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: User Logout
      description: ユーザーログアウト
      operationId: logout
      tags:
        - Authentication
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/user:
    get:
      summary: Get Current User
      description: 認証済みユーザー情報取得
      operationId: getCurrentUser
      tags:
        - Authentication
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    sanctumAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
          example: "ok"
        message:
          type: string
          example: "All systems operational"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-09T12:00:00Z"
        version:
          type: string
          example: "1.0.0"
        checks:
          type: object
          properties:
            api:
              $ref: '#/components/schemas/HealthCheck'
            database:
              $ref: '#/components/schemas/HealthCheck'
            redis:
              $ref: '#/components/schemas/HealthCheck'
          required:
            - api
            - database
            - redis
      required:
        - status
        - message
        - timestamp
        - version
        - checks

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
          example: "ok"
        message:
          type: string
          example: "API is healthy"
        connection_time_ms:
          type: number
          format: float
          example: 7.59
        driver:
          type: string
          example: "pgsql"
        error:
          type: string
          example: "Connection failed"
      required:
        - status
        - message

    RegisterRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
          minLength: 2
          maxLength: 255
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "password123"
          minLength: 8
        password_confirmation:
          type: string
          format: password
          example: "password123"
      required:
        - name
        - email
        - password
        - password_confirmation

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "password123"
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..."
        token_type:
          type: string
          example: "Bearer"
        user:
          $ref: '#/components/schemas/User'
      required:
        - access_token
        - token_type
        - user

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-09T12:00:00Z"
        created_at:
          type: string
          format: date-time
          example: "2025-01-09T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-09T12:00:00Z"
      required:
        - id
        - name
        - email
        - created_at
        - updated_at

    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
      required:
        - data

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"
      required:
        - message

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "An error occurred"
        error:
          type: string
          example: "INVALID_CREDENTIALS"
      required:
        - message

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["The email field is required."]
            password: ["The password must be at least 8 characters."]
      required:
        - message
        - errors

tags:
  - name: System
    description: システム関連のエンドポイント
  - name: Authentication
    description: 認証関連のエンドポイント